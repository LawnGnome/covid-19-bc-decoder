{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","ListItem.tsx","Signature.module.css","Decoder.tsx","Patient.tsx","Immunisation.tsx","Signature.tsx","KeyStore.ts","keys/qc.ts","keys/bc.ts"],"names":["AppState","App","useState","undefined","code","setCode","SCANNING","state","setState","onQrCode","useCallback","RESULTS","onReset","useLayoutEffect","getSize","document","documentElement","style","setProperty","window","innerHeight","onresize","id","onClick","icon","faCamera","ABOUT","className","target","rel","href","faGithub","onResult","result","getText","constraints","facingMode","videoStyle","height","width","top","left","display","overflow","position","videoContainerStyle","paddingTop","Decoder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","ListItem","label","value","module","exports","startsWith","substr","raw","acc","enc","c","pair","parseInt","String","fromCharCode","decodeNumericalCode","payload","JSON","parse","pako","inflateRaw","Buffer","from","split","to","maybeBundle","R4","RTTI_Bundle","decode","vc","credentialSubject","fhirBundle","_tag","patient","bundle","right","entry","Error","immunisations","resource","resourceType","push","signature","length","map","imm","immunisation","e","Patient","name","family","given","join","birthDate","decodeVaccineCodes","coding","system","Immunisation","occurrenceDateTime","vaccineCode","lotNumber","performer","actor","filter","State","JURISDICTIONS","Quebec","keys","alg","kty","crv","use","kid","x","y","store","verifiers","this","Map","a","size","Object","entries","jurisdiction","JWS","JWK","asKeyStore","createVerify","set","sig","verifier","verify","getStore","load","Signature","VERIFYING","setJurisdiction","useMemo","KeyStore","VERIFIED","FAILED","styles","verifying","faSpinner","pulse","success","faCheckCircle","failure","faExclamationCircle"],"mappings":"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","file":"static/js/main.589342fb.chunk.js","sourcesContent":["import React, { useCallback, useLayoutEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport { QrReader } from \"@blackbox-vision/react-qr-reader\";\nimport Decoder from \"./Decoder\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faCamera } from \"@fortawesome/free-solid-svg-icons\";\n\nenum AppState {\n  SCANNING,\n  RESULTS,\n  ABOUT,\n}\n\nconst App: React.FunctionComponent<{}> = () => {\n  const [code, setCode] = useState<string | undefined>(undefined);\n  const [state, setState] = useState(AppState.SCANNING);\n\n  const onQrCode = useCallback((code: string | undefined) => {\n    if (code) {\n      setCode(code);\n      setState(AppState.RESULTS);\n    }\n  }, []);\n\n  const onReset = useCallback(() => {\n    setCode(undefined);\n    setState(AppState.SCANNING);\n  }, []);\n\n  useLayoutEffect(() => {\n    const getSize = () =>\n      document.documentElement.style.setProperty(\n        \"--vh\",\n        `${window.innerHeight}px`\n      );\n\n    getSize();\n    window.onresize = getSize;\n  });\n\n  return (\n    <>\n      <div id=\"nav\">\n        <nav>\n          {state !== AppState.SCANNING && (\n            <button onClick={onReset}>\n              <FontAwesomeIcon icon={faCamera} />\n            </button>\n          )}\n          <div id=\"spacer\"></div>\n          {state !== AppState.ABOUT && (\n            <button className=\"about\" onClick={() => setState(AppState.ABOUT)}>\n              About\n            </button>\n          )}\n          <a\n            id=\"github\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://github.com/LawnGnome/covid-19-bc-decoder\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n        </nav>\n      </div>\n      {state === AppState.ABOUT && (\n        <div className=\"content\">\n          <h2>About this site</h2>\n          <p>\n            This is a very quick and dirty site to decode and display the\n            information encoded in a BC Vaccine Card.\n          </p>\n          <p>\n            Your QR code and health information are not transmitted anywhere.\n            (The coders among you can verify that using the source code below.)\n          </p>\n          <p>\n            The source code for this site is hosted{\" \"}\n            <a href=\"https://github.com/LawnGnome/covid-19-bc-decoder\">\n              on GitHub\n            </a>\n            . Bug reports are welcome.\n          </p>\n          <p>\n            If you want to contact the author, ping{\" \"}\n            <a href=\"https://twitter.com/LGnome\">@LGnome</a> on Twitter.\n          </p>\n        </div>\n      )}\n      {state === AppState.SCANNING && (\n        <div id=\"scanner\">\n          <QrReader\n            onResult={(result) => onQrCode(result?.getText())}\n            constraints={{ facingMode: \"environment\" }}\n            videoStyle={{\n              height: null,\n              width: null,\n              top: null,\n              left: null,\n              display: null,\n              overflow: null,\n              position: null,\n            }}\n            videoContainerStyle={{\n              height: null,\n              width: null,\n              position: null,\n              paddingTop: null,\n              overflow: null,\n            }}\n          />\n        </div>\n      )}\n      {state === AppState.RESULTS && code && (\n        <div id=\"results\" className=\"content\">\n          <Decoder code={code} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\n\nexport interface Props {\n  label: string;\n  value?: string;\n}\n\nconst ListItem: React.FunctionComponent<Props> = ({ label, value }) => {\n  return (\n    <>\n      {value !== undefined && (\n        <>\n          <dt>{label}</dt>\n          <dd>{value}</dd>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ListItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signature\":\"Signature_signature__3cbGP\",\"verifying\":\"Signature_verifying__3_pMS\",\"success\":\"Signature_success__qmBR2\",\"failure\":\"Signature_failure__1hhGk\",\"icon\":\"Signature_icon__3BkQB\"};","import React from \"react\";\n\nimport pako from \"pako\";\nimport { R4 } from \"@ahryman40k/ts-fhir-types\";\n\nimport Patient from \"./Patient\";\nimport Immunisation from \"./Immunisation\";\nimport Signature from \"./Signature\";\n\nconst decodeNumericalCode = (code: string) => {\n  let acc: string | undefined = undefined;\n  let enc = \"\";\n  for (const c of code) {\n    if (acc === undefined) {\n      acc = c;\n    } else {\n      const pair = parseInt(`${acc}${c}`) + 45;\n      enc += String.fromCharCode(pair);\n\n      acc = undefined;\n    }\n  }\n\n  return enc;\n};\n\nexport interface Props {\n  code: string;\n}\n\nconst Decoder: React.FunctionComponent<Props> = ({ code }) => {\n  if (code.startsWith(\"shc:/\")) code = code.substr(5);\n  const raw = decodeNumericalCode(code);\n\n  // Unfortunately, the standard JWS libraries don't handle binary payloads\n  // properly, so we'll just decode it by hand. This will break if we ever get\n  // QR codes with multiple parts.\n  const payload = JSON.parse(\n    pako.inflateRaw(Buffer.from(raw.split(\".\")[1], \"base64\"), {\n      to: \"string\",\n    })\n  );\n\n  try {\n    const maybeBundle = R4.RTTI_Bundle.decode(\n      payload.vc.credentialSubject.fhirBundle\n    );\n    if (maybeBundle._tag !== \"Right\") {\n      throw maybeBundle.left;\n    }\n    const bundle = maybeBundle.right;\n\n    if (bundle.entry === undefined) {\n      throw new Error(\"no entries found in bundle\");\n    }\n\n    let patient: R4.IPatient | undefined;\n    let immunisations: R4.IImmunization[] = [];\n    for (const entry of bundle.entry) {\n      const resource = entry.resource;\n      if (resource?.resourceType === \"Patient\") {\n        patient = resource;\n      } else if (resource?.resourceType === \"Immunization\") {\n        immunisations.push(resource);\n      }\n    }\n\n    return (\n      <>\n        <Signature signature={raw} />\n        {patient && <Patient patient={patient} />}\n        {immunisations.length > 0 && (\n          <>\n            <h2>Vaccinations</h2>\n            {immunisations.map((imm) => (\n              <Immunisation immunisation={imm} />\n            ))}\n          </>\n        )}\n      </>\n    );\n  } catch (e) {\n    return (\n      <div>\n        The QR code had an unexpected structure, and could not be parsed. Try\n        scanning another one?\n      </div>\n    );\n  }\n};\n\nexport default Decoder;\n","import React from \"react\";\n\nimport { R4 } from \"@ahryman40k/ts-fhir-types\";\nimport ListItem from \"./ListItem\";\n\nexport interface Props {\n  patient: R4.IPatient;\n}\n\nconst Patient: React.FunctionComponent<Props> = ({ patient }) => {\n  return (\n    <>\n      <h2>Personal information</h2>\n      <dl>\n        {patient.name?.map((name) => {\n          return (\n            <>\n              <ListItem label=\"Family name\" value={name.family} />\n              <ListItem\n                label=\"Given names\"\n                value={\n                  name.given && name.given.length > 0\n                    ? name.given.join(\" \")\n                    : undefined\n                }\n              />\n            </>\n          );\n        })}\n        <ListItem label=\"Date of birth\" value={patient.birthDate} />\n      </dl>\n    </>\n  );\n};\n\nexport default Patient;\n","import React from \"react\";\n\nimport { R4 } from \"@ahryman40k/ts-fhir-types\";\nimport ListItem from \"./ListItem\";\n\nconst decodeVaccineCodes = (coding?: R4.ICoding[]) => {\n  if (coding) {\n    for (const code of coding) {\n      if (code.system === \"http://hl7.org/fhir/sid/cvx\") {\n        switch (code.code) {\n          case \"510\":\n            return \"Sinopharm\";\n          case \"511\":\n            return \"Sinovac\";\n          case \"502\":\n            return \"COVAXIN\";\n          case \"501\":\n            return \"QAZCOVID-IN\";\n          case \"503\":\n            return \"COVIVAC\";\n          case \"500\":\n            return \"Unknown COVID-19 vaccine\";\n          case \"507\":\n            return \"Anhui Zhifei Longcom Biopharm\";\n          case \"509\":\n            return \"EpiVacCorona\";\n          case \"508\":\n            return \"Jiangsu\";\n          case \"211\":\n            return \"Novavax\";\n          case \"212\":\n            return \"Janssen\";\n          case \"210\":\n            return \"AstraZeneca\";\n          case \"506\":\n            return \"CanSino\";\n          case \"504\":\n            return \"Sputnik Light\";\n          case \"505\":\n            return \"Sputnik V\";\n          case \"207\":\n            return \"Moderna\";\n          case \"208\":\n            return \"Pfizer\";\n        }\n      }\n    }\n  }\n};\n\nexport interface Props {\n  immunisation: R4.IImmunization;\n}\n\nconst Immunisation: React.FunctionComponent<Props> = ({ immunisation }) => {\n  return (\n    <dl>\n      <ListItem label=\"Date\" value={immunisation.occurrenceDateTime} />\n      <ListItem\n        label=\"Type\"\n        value={decodeVaccineCodes(immunisation.vaccineCode.coding)}\n      />\n      <ListItem label=\"Lot number\" value={immunisation.lotNumber} />\n      <ListItem\n        label=\"Location\"\n        value={immunisation.performer\n          ?.map((performer) => performer.actor.display)\n          .filter((performer) => performer !== undefined)\n          .join(\"; \")}\n      />\n    </dl>\n  );\n};\n\nexport default Immunisation;\n","import {\n  faCheckCircle,\n  faExclamationCircle,\n  faSpinner,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useMemo, useState } from \"react\";\nimport KeyStore from \"./KeyStore\";\n\nimport styles from \"./Signature.module.css\";\n\nexport interface Props {\n  signature: string;\n}\n\nenum State {\n  VERIFYING,\n  VERIFIED,\n  FAILED,\n}\n\nconst Signature: React.FunctionComponent<Props> = ({ signature }) => {\n  const [state, setState] = useState(State.VERIFYING);\n  const [jurisdiction, setJurisdiction] = useState<string | undefined>(\n    undefined\n  );\n\n  useMemo(async () => {\n    const jurisdiction = await (await KeyStore()).verify(signature);\n\n    if (jurisdiction !== undefined) {\n      setJurisdiction(jurisdiction);\n      setState(State.VERIFIED);\n    } else {\n      setJurisdiction(undefined);\n      setState(State.FAILED);\n    }\n  }, [signature]);\n\n  return (\n    <div className={styles.signature}>\n      {state === State.VERIFYING && (\n        <div className={styles.verifying}>\n          <div className={styles.icon}>\n            <FontAwesomeIcon icon={faSpinner} pulse />\n          </div>\n          <div>Checking QR code signature&hellip;</div>\n        </div>\n      )}\n      {state === State.VERIFIED && jurisdiction && (\n        <div className={styles.success}>\n          <FontAwesomeIcon className={styles.icon} icon={faCheckCircle} />\n          <div>QR code verified by {jurisdiction}</div>\n        </div>\n      )}\n      {state === State.FAILED && (\n        <div className={styles.failure}>\n          <FontAwesomeIcon className={styles.icon} icon={faExclamationCircle} />\n          <div>QR code could not be verified by a known jurisdiction</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Signature;\n","import { JWK, JWS } from \"node-jose\";\n\nimport BC from \"./keys/bc\";\nimport QC from \"./keys/qc\";\n\nconst JURISDICTIONS = {\n  Quebec: QC,\n  \"British Columbia\": BC,\n};\n\nclass KeyStore {\n  verifiers: Map<string, JWS.Verifier>;\n\n  constructor() {\n    this.verifiers = new Map();\n  }\n\n  async load() {\n    if (this.verifiers.size === 0) {\n      for (const [jurisdiction, raw] of Object.entries(JURISDICTIONS)) {\n        this.verifiers.set(\n          jurisdiction,\n          JWS.createVerify(await JWK.asKeyStore(raw))\n        );\n      }\n    }\n  }\n\n  async verify(sig: string): Promise<string | undefined> {\n    for (const [jurisdiction, verifier] of this.verifiers) {\n      try {\n        // The actual result is unnecessary here; if the verifications fails\n        // then an exception will be raised, and we'll handle that elsewhere.\n        await verifier.verify(sig);\n        return jurisdiction;\n      } catch (e) {}\n    }\n  }\n}\n\nconst store = new KeyStore();\nconst getStore = async () => {\n  await store.load();\n  return store;\n};\n\nexport default getStore;\n","const keys = {\n  keys: [\n    {\n      alg: \"ES256\",\n      kty: \"EC\",\n      crv: \"P-256\",\n      use: \"sig\",\n      kid: \"fFyWQ6CvV9Me_FkwWAL_DwxI_VQROw8tyzSp5_zI8_4\",\n      x: \"XSxuwW_VI_s6lAw6LAlL8N7REGzQd_zXeIVDHP_j_Do\",\n      y: \"88-aI4WAEl4YmUpew40a9vq_w5OcFvsuaKMxJRLRLL0\",\n    },\n  ],\n};\n\nexport default keys;\n","const keys = {\r\n  \"keys\": [\r\n    {\r\n      \"kty\": \"EC\",\r\n      \"kid\": \"XCqxdhhS7SWlPqihaUXovM_FjU65WeoBFGc_ppent0Q\",\r\n      \"use\": \"sig\",\r\n      \"alg\": \"ES256\",\r\n      \"crv\": \"P-256\",\r\n      \"x\": \"xscSbZemoTx1qFzFo-j9VSnvAXdv9K-3DchzJvNnwrY\",\r\n      \"y\": \"jA5uS5bz8R2nxf_TU-0ZmXq6CKWZhAG1Y4icAx8a9CA\"\r\n    }\r\n  ]\r\n}; export default keys;"],"sourceRoot":""}